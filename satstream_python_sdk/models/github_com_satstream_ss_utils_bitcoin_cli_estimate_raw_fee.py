# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GithubComSatstreamSsUtilsBitcoinCliEstimateRawFee(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'long': 'AllOfgithubComSatstreamSsUtilsBitcoinCliEstimateRawFeeLong',
        'medium': 'AllOfgithubComSatstreamSsUtilsBitcoinCliEstimateRawFeeMedium',
        'short': 'AllOfgithubComSatstreamSsUtilsBitcoinCliEstimateRawFeeShort'
    }

    attribute_map = {
        'long': 'long',
        'medium': 'medium',
        'short': 'short'
    }

    def __init__(self, long=None, medium=None, short=None):  # noqa: E501
        """GithubComSatstreamSsUtilsBitcoinCliEstimateRawFee - a model defined in Swagger"""  # noqa: E501
        self._long = None
        self._medium = None
        self._short = None
        self.discriminator = None
        if long is not None:
            self.long = long
        if medium is not None:
            self.medium = medium
        if short is not None:
            self.short = short

    @property
    def long(self):
        """Gets the long of this GithubComSatstreamSsUtilsBitcoinCliEstimateRawFee.  # noqa: E501

        Estimate for long time horizon  # noqa: E501

        :return: The long of this GithubComSatstreamSsUtilsBitcoinCliEstimateRawFee.  # noqa: E501
        :rtype: AllOfgithubComSatstreamSsUtilsBitcoinCliEstimateRawFeeLong
        """
        return self._long

    @long.setter
    def long(self, long):
        """Sets the long of this GithubComSatstreamSsUtilsBitcoinCliEstimateRawFee.

        Estimate for long time horizon  # noqa: E501

        :param long: The long of this GithubComSatstreamSsUtilsBitcoinCliEstimateRawFee.  # noqa: E501
        :type: AllOfgithubComSatstreamSsUtilsBitcoinCliEstimateRawFeeLong
        """

        self._long = long

    @property
    def medium(self):
        """Gets the medium of this GithubComSatstreamSsUtilsBitcoinCliEstimateRawFee.  # noqa: E501

        Estimate for medium time horizon  # noqa: E501

        :return: The medium of this GithubComSatstreamSsUtilsBitcoinCliEstimateRawFee.  # noqa: E501
        :rtype: AllOfgithubComSatstreamSsUtilsBitcoinCliEstimateRawFeeMedium
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this GithubComSatstreamSsUtilsBitcoinCliEstimateRawFee.

        Estimate for medium time horizon  # noqa: E501

        :param medium: The medium of this GithubComSatstreamSsUtilsBitcoinCliEstimateRawFee.  # noqa: E501
        :type: AllOfgithubComSatstreamSsUtilsBitcoinCliEstimateRawFeeMedium
        """

        self._medium = medium

    @property
    def short(self):
        """Gets the short of this GithubComSatstreamSsUtilsBitcoinCliEstimateRawFee.  # noqa: E501

        Estimate for short time horizon  # noqa: E501

        :return: The short of this GithubComSatstreamSsUtilsBitcoinCliEstimateRawFee.  # noqa: E501
        :rtype: AllOfgithubComSatstreamSsUtilsBitcoinCliEstimateRawFeeShort
        """
        return self._short

    @short.setter
    def short(self, short):
        """Sets the short of this GithubComSatstreamSsUtilsBitcoinCliEstimateRawFee.

        Estimate for short time horizon  # noqa: E501

        :param short: The short of this GithubComSatstreamSsUtilsBitcoinCliEstimateRawFee.  # noqa: E501
        :type: AllOfgithubComSatstreamSsUtilsBitcoinCliEstimateRawFeeShort
        """

        self._short = short

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GithubComSatstreamSsUtilsBitcoinCliEstimateRawFee, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComSatstreamSsUtilsBitcoinCliEstimateRawFee):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
