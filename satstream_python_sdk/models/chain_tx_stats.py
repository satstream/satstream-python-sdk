# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChainTxStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'int',
        'txcount': 'int',
        'txrate': 'float',
        'window_block_count': 'int',
        'window_final_block_hash': 'str',
        'window_final_block_height': 'int',
        'window_interval': 'int',
        'window_tx_count': 'int'
    }

    attribute_map = {
        'time': 'time',
        'txcount': 'txcount',
        'txrate': 'txrate',
        'window_block_count': 'window_block_count',
        'window_final_block_hash': 'window_final_block_hash',
        'window_final_block_height': 'window_final_block_height',
        'window_interval': 'window_interval',
        'window_tx_count': 'window_tx_count'
    }

    def __init__(self, time=None, txcount=None, txrate=None, window_block_count=None, window_final_block_hash=None, window_final_block_height=None, window_interval=None, window_tx_count=None):  # noqa: E501
        """ChainTxStats - a model defined in Swagger"""  # noqa: E501
        self._time = None
        self._txcount = None
        self._txrate = None
        self._window_block_count = None
        self._window_final_block_hash = None
        self._window_final_block_height = None
        self._window_interval = None
        self._window_tx_count = None
        self.discriminator = None
        if time is not None:
            self.time = time
        if txcount is not None:
            self.txcount = txcount
        if txrate is not None:
            self.txrate = txrate
        if window_block_count is not None:
            self.window_block_count = window_block_count
        if window_final_block_hash is not None:
            self.window_final_block_hash = window_final_block_hash
        if window_final_block_height is not None:
            self.window_final_block_height = window_final_block_height
        if window_interval is not None:
            self.window_interval = window_interval
        if window_tx_count is not None:
            self.window_tx_count = window_tx_count

    @property
    def time(self):
        """Gets the time of this ChainTxStats.  # noqa: E501

        The timestamp for the final block in the window  # noqa: E501

        :return: The time of this ChainTxStats.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ChainTxStats.

        The timestamp for the final block in the window  # noqa: E501

        :param time: The time of this ChainTxStats.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def txcount(self):
        """Gets the txcount of this ChainTxStats.  # noqa: E501

        The total number of transactions in the chain  # noqa: E501

        :return: The txcount of this ChainTxStats.  # noqa: E501
        :rtype: int
        """
        return self._txcount

    @txcount.setter
    def txcount(self, txcount):
        """Sets the txcount of this ChainTxStats.

        The total number of transactions in the chain  # noqa: E501

        :param txcount: The txcount of this ChainTxStats.  # noqa: E501
        :type: int
        """

        self._txcount = txcount

    @property
    def txrate(self):
        """Gets the txrate of this ChainTxStats.  # noqa: E501

        The average rate of transactions per second  # noqa: E501

        :return: The txrate of this ChainTxStats.  # noqa: E501
        :rtype: float
        """
        return self._txrate

    @txrate.setter
    def txrate(self, txrate):
        """Sets the txrate of this ChainTxStats.

        The average rate of transactions per second  # noqa: E501

        :param txrate: The txrate of this ChainTxStats.  # noqa: E501
        :type: float
        """

        self._txrate = txrate

    @property
    def window_block_count(self):
        """Gets the window_block_count of this ChainTxStats.  # noqa: E501

        Size of the window in number of blocks  # noqa: E501

        :return: The window_block_count of this ChainTxStats.  # noqa: E501
        :rtype: int
        """
        return self._window_block_count

    @window_block_count.setter
    def window_block_count(self, window_block_count):
        """Sets the window_block_count of this ChainTxStats.

        Size of the window in number of blocks  # noqa: E501

        :param window_block_count: The window_block_count of this ChainTxStats.  # noqa: E501
        :type: int
        """

        self._window_block_count = window_block_count

    @property
    def window_final_block_hash(self):
        """Gets the window_final_block_hash of this ChainTxStats.  # noqa: E501

        The hash of the final block in the window  # noqa: E501

        :return: The window_final_block_hash of this ChainTxStats.  # noqa: E501
        :rtype: str
        """
        return self._window_final_block_hash

    @window_final_block_hash.setter
    def window_final_block_hash(self, window_final_block_hash):
        """Sets the window_final_block_hash of this ChainTxStats.

        The hash of the final block in the window  # noqa: E501

        :param window_final_block_hash: The window_final_block_hash of this ChainTxStats.  # noqa: E501
        :type: str
        """

        self._window_final_block_hash = window_final_block_hash

    @property
    def window_final_block_height(self):
        """Gets the window_final_block_height of this ChainTxStats.  # noqa: E501

        The height of the final block in the window  # noqa: E501

        :return: The window_final_block_height of this ChainTxStats.  # noqa: E501
        :rtype: int
        """
        return self._window_final_block_height

    @window_final_block_height.setter
    def window_final_block_height(self, window_final_block_height):
        """Sets the window_final_block_height of this ChainTxStats.

        The height of the final block in the window  # noqa: E501

        :param window_final_block_height: The window_final_block_height of this ChainTxStats.  # noqa: E501
        :type: int
        """

        self._window_final_block_height = window_final_block_height

    @property
    def window_interval(self):
        """Gets the window_interval of this ChainTxStats.  # noqa: E501

        The elapsed time in the window in seconds  # noqa: E501

        :return: The window_interval of this ChainTxStats.  # noqa: E501
        :rtype: int
        """
        return self._window_interval

    @window_interval.setter
    def window_interval(self, window_interval):
        """Sets the window_interval of this ChainTxStats.

        The elapsed time in the window in seconds  # noqa: E501

        :param window_interval: The window_interval of this ChainTxStats.  # noqa: E501
        :type: int
        """

        self._window_interval = window_interval

    @property
    def window_tx_count(self):
        """Gets the window_tx_count of this ChainTxStats.  # noqa: E501

        The number of transactions in the window  # noqa: E501

        :return: The window_tx_count of this ChainTxStats.  # noqa: E501
        :rtype: int
        """
        return self._window_tx_count

    @window_tx_count.setter
    def window_tx_count(self, window_tx_count):
        """Sets the window_tx_count of this ChainTxStats.

        The number of transactions in the window  # noqa: E501

        :param window_tx_count: The window_tx_count of this ChainTxStats.  # noqa: E501
        :type: int
        """

        self._window_tx_count = window_tx_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChainTxStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChainTxStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
