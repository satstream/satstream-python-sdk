# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RawMempoolData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'detailed': 'dict(str, MempoolEntry)',
        'sequence': 'AllOfRawMempoolDataSequence',
        'txids': 'list[str]'
    }

    attribute_map = {
        'detailed': 'detailed',
        'sequence': 'sequence',
        'txids': 'txids'
    }

    def __init__(self, detailed=None, sequence=None, txids=None):  # noqa: E501
        """RawMempoolData - a model defined in Swagger"""  # noqa: E501
        self._detailed = None
        self._sequence = None
        self._txids = None
        self.discriminator = None
        if detailed is not None:
            self.detailed = detailed
        if sequence is not None:
            self.sequence = sequence
        if txids is not None:
            self.txids = txids

    @property
    def detailed(self):
        """Gets the detailed of this RawMempoolData.  # noqa: E501

        Only if verbose is true  # noqa: E501

        :return: The detailed of this RawMempoolData.  # noqa: E501
        :rtype: dict(str, MempoolEntry)
        """
        return self._detailed

    @detailed.setter
    def detailed(self, detailed):
        """Sets the detailed of this RawMempoolData.

        Only if verbose is true  # noqa: E501

        :param detailed: The detailed of this RawMempoolData.  # noqa: E501
        :type: dict(str, MempoolEntry)
        """

        self._detailed = detailed

    @property
    def sequence(self):
        """Gets the sequence of this RawMempoolData.  # noqa: E501

        Only if mempool_sequence is true  # noqa: E501

        :return: The sequence of this RawMempoolData.  # noqa: E501
        :rtype: AllOfRawMempoolDataSequence
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this RawMempoolData.

        Only if mempool_sequence is true  # noqa: E501

        :param sequence: The sequence of this RawMempoolData.  # noqa: E501
        :type: AllOfRawMempoolDataSequence
        """

        self._sequence = sequence

    @property
    def txids(self):
        """Gets the txids of this RawMempoolData.  # noqa: E501

        Only if verbose is false  # noqa: E501

        :return: The txids of this RawMempoolData.  # noqa: E501
        :rtype: list[str]
        """
        return self._txids

    @txids.setter
    def txids(self, txids):
        """Sets the txids of this RawMempoolData.

        Only if verbose is false  # noqa: E501

        :param txids: The txids of this RawMempoolData.  # noqa: E501
        :type: list[str]
        """

        self._txids = txids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RawMempoolData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RawMempoolData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
