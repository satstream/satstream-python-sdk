# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UTXOBlockInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coinbase': 'float',
        'new_outputs_ex_coinbase': 'float',
        'prevout_spent': 'float',
        'unspendable': 'float',
        'unspendables': 'AllOfUTXOBlockInfoUnspendables'
    }

    attribute_map = {
        'coinbase': 'coinbase',
        'new_outputs_ex_coinbase': 'new_outputs_ex_coinbase',
        'prevout_spent': 'prevout_spent',
        'unspendable': 'unspendable',
        'unspendables': 'unspendables'
    }

    def __init__(self, coinbase=None, new_outputs_ex_coinbase=None, prevout_spent=None, unspendable=None, unspendables=None):  # noqa: E501
        """UTXOBlockInfo - a model defined in Swagger"""  # noqa: E501
        self._coinbase = None
        self._new_outputs_ex_coinbase = None
        self._prevout_spent = None
        self._unspendable = None
        self._unspendables = None
        self.discriminator = None
        if coinbase is not None:
            self.coinbase = coinbase
        if new_outputs_ex_coinbase is not None:
            self.new_outputs_ex_coinbase = new_outputs_ex_coinbase
        if prevout_spent is not None:
            self.prevout_spent = prevout_spent
        if unspendable is not None:
            self.unspendable = unspendable
        if unspendables is not None:
            self.unspendables = unspendables

    @property
    def coinbase(self):
        """Gets the coinbase of this UTXOBlockInfo.  # noqa: E501

        Coinbase subsidy amount of this block  # noqa: E501

        :return: The coinbase of this UTXOBlockInfo.  # noqa: E501
        :rtype: float
        """
        return self._coinbase

    @coinbase.setter
    def coinbase(self, coinbase):
        """Sets the coinbase of this UTXOBlockInfo.

        Coinbase subsidy amount of this block  # noqa: E501

        :param coinbase: The coinbase of this UTXOBlockInfo.  # noqa: E501
        :type: float
        """

        self._coinbase = coinbase

    @property
    def new_outputs_ex_coinbase(self):
        """Gets the new_outputs_ex_coinbase of this UTXOBlockInfo.  # noqa: E501

        Total amount of new outputs created by this block  # noqa: E501

        :return: The new_outputs_ex_coinbase of this UTXOBlockInfo.  # noqa: E501
        :rtype: float
        """
        return self._new_outputs_ex_coinbase

    @new_outputs_ex_coinbase.setter
    def new_outputs_ex_coinbase(self, new_outputs_ex_coinbase):
        """Sets the new_outputs_ex_coinbase of this UTXOBlockInfo.

        Total amount of new outputs created by this block  # noqa: E501

        :param new_outputs_ex_coinbase: The new_outputs_ex_coinbase of this UTXOBlockInfo.  # noqa: E501
        :type: float
        """

        self._new_outputs_ex_coinbase = new_outputs_ex_coinbase

    @property
    def prevout_spent(self):
        """Gets the prevout_spent of this UTXOBlockInfo.  # noqa: E501

        Total amount of all prevouts spent in this block  # noqa: E501

        :return: The prevout_spent of this UTXOBlockInfo.  # noqa: E501
        :rtype: float
        """
        return self._prevout_spent

    @prevout_spent.setter
    def prevout_spent(self, prevout_spent):
        """Sets the prevout_spent of this UTXOBlockInfo.

        Total amount of all prevouts spent in this block  # noqa: E501

        :param prevout_spent: The prevout_spent of this UTXOBlockInfo.  # noqa: E501
        :type: float
        """

        self._prevout_spent = prevout_spent

    @property
    def unspendable(self):
        """Gets the unspendable of this UTXOBlockInfo.  # noqa: E501

        Total amount of unspendable outputs created  # noqa: E501

        :return: The unspendable of this UTXOBlockInfo.  # noqa: E501
        :rtype: float
        """
        return self._unspendable

    @unspendable.setter
    def unspendable(self, unspendable):
        """Sets the unspendable of this UTXOBlockInfo.

        Total amount of unspendable outputs created  # noqa: E501

        :param unspendable: The unspendable of this UTXOBlockInfo.  # noqa: E501
        :type: float
        """

        self._unspendable = unspendable

    @property
    def unspendables(self):
        """Gets the unspendables of this UTXOBlockInfo.  # noqa: E501

        Detailed view of unspendable categories  # noqa: E501

        :return: The unspendables of this UTXOBlockInfo.  # noqa: E501
        :rtype: AllOfUTXOBlockInfoUnspendables
        """
        return self._unspendables

    @unspendables.setter
    def unspendables(self, unspendables):
        """Sets the unspendables of this UTXOBlockInfo.

        Detailed view of unspendable categories  # noqa: E501

        :param unspendables: The unspendables of this UTXOBlockInfo.  # noqa: E501
        :type: AllOfUTXOBlockInfoUnspendables
        """

        self._unspendables = unspendables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UTXOBlockInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UTXOBlockInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
