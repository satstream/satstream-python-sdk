# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bestblockhash': 'str',
        'blocks': 'int',
        'chain': 'str',
        'chainwork': 'str',
        'difficulty': 'float',
        'headers': 'int',
        'mediantime': 'int',
        'time': 'int'
    }

    attribute_map = {
        'bestblockhash': 'bestblockhash',
        'blocks': 'blocks',
        'chain': 'chain',
        'chainwork': 'chainwork',
        'difficulty': 'difficulty',
        'headers': 'headers',
        'mediantime': 'mediantime',
        'time': 'time'
    }

    def __init__(self, bestblockhash=None, blocks=None, chain=None, chainwork=None, difficulty=None, headers=None, mediantime=None, time=None):  # noqa: E501
        """GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo - a model defined in Swagger"""  # noqa: E501
        self._bestblockhash = None
        self._blocks = None
        self._chain = None
        self._chainwork = None
        self._difficulty = None
        self._headers = None
        self._mediantime = None
        self._time = None
        self.discriminator = None
        if bestblockhash is not None:
            self.bestblockhash = bestblockhash
        if blocks is not None:
            self.blocks = blocks
        if chain is not None:
            self.chain = chain
        if chainwork is not None:
            self.chainwork = chainwork
        if difficulty is not None:
            self.difficulty = difficulty
        if headers is not None:
            self.headers = headers
        if mediantime is not None:
            self.mediantime = mediantime
        if time is not None:
            self.time = time

    @property
    def bestblockhash(self):
        """Gets the bestblockhash of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501

        The hash of the currently best block  # noqa: E501

        :return: The bestblockhash of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501
        :rtype: str
        """
        return self._bestblockhash

    @bestblockhash.setter
    def bestblockhash(self, bestblockhash):
        """Sets the bestblockhash of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.

        The hash of the currently best block  # noqa: E501

        :param bestblockhash: The bestblockhash of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501
        :type: str
        """

        self._bestblockhash = bestblockhash

    @property
    def blocks(self):
        """Gets the blocks of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501

        The height of the most-work fully-validated chain  # noqa: E501

        :return: The blocks of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501
        :rtype: int
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.

        The height of the most-work fully-validated chain  # noqa: E501

        :param blocks: The blocks of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501
        :type: int
        """

        self._blocks = blocks

    @property
    def chain(self):
        """Gets the chain of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501

        Current network name (main, test, signet, regtest)  # noqa: E501

        :return: The chain of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.

        Current network name (main, test, signet, regtest)  # noqa: E501

        :param chain: The chain of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501
        :type: str
        """

        self._chain = chain

    @property
    def chainwork(self):
        """Gets the chainwork of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501

        Total amount of work in active chain, in hexadecimal  # noqa: E501

        :return: The chainwork of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501
        :rtype: str
        """
        return self._chainwork

    @chainwork.setter
    def chainwork(self, chainwork):
        """Sets the chainwork of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.

        Total amount of work in active chain, in hexadecimal  # noqa: E501

        :param chainwork: The chainwork of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501
        :type: str
        """

        self._chainwork = chainwork

    @property
    def difficulty(self):
        """Gets the difficulty of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501

        The current difficulty  # noqa: E501

        :return: The difficulty of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501
        :rtype: float
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty):
        """Sets the difficulty of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.

        The current difficulty  # noqa: E501

        :param difficulty: The difficulty of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501
        :type: float
        """

        self._difficulty = difficulty

    @property
    def headers(self):
        """Gets the headers of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501

        The current number of headers we have validated  # noqa: E501

        :return: The headers of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501
        :rtype: int
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.

        The current number of headers we have validated  # noqa: E501

        :param headers: The headers of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501
        :type: int
        """

        self._headers = headers

    @property
    def mediantime(self):
        """Gets the mediantime of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501

        The median block time expressed in UNIX epoch time  # noqa: E501

        :return: The mediantime of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501
        :rtype: int
        """
        return self._mediantime

    @mediantime.setter
    def mediantime(self, mediantime):
        """Sets the mediantime of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.

        The median block time expressed in UNIX epoch time  # noqa: E501

        :param mediantime: The mediantime of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501
        :type: int
        """

        self._mediantime = mediantime

    @property
    def time(self):
        """Gets the time of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501

        The block time expressed in UNIX epoch time  # noqa: E501

        :return: The time of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.

        The block time expressed in UNIX epoch time  # noqa: E501

        :param time: The time of this GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo.  # noqa: E501
        :type: int
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
