# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blessed_inscriptions': 'int',
        'chain': 'str',
        'cursed_inscriptions': 'int',
        'height': 'int',
        'inscriptions': 'int',
        'lost_sats': 'int',
        'minimum_rune_for_next_block': 'str',
        'runes': 'int'
    }

    attribute_map = {
        'blessed_inscriptions': 'blessed_inscriptions',
        'chain': 'chain',
        'cursed_inscriptions': 'cursed_inscriptions',
        'height': 'height',
        'inscriptions': 'inscriptions',
        'lost_sats': 'lost_sats',
        'minimum_rune_for_next_block': 'minimum_rune_for_next_block',
        'runes': 'runes'
    }

    def __init__(self, blessed_inscriptions=None, chain=None, cursed_inscriptions=None, height=None, inscriptions=None, lost_sats=None, minimum_rune_for_next_block=None, runes=None):  # noqa: E501
        """StatusResponse - a model defined in Swagger"""  # noqa: E501
        self._blessed_inscriptions = None
        self._chain = None
        self._cursed_inscriptions = None
        self._height = None
        self._inscriptions = None
        self._lost_sats = None
        self._minimum_rune_for_next_block = None
        self._runes = None
        self.discriminator = None
        if blessed_inscriptions is not None:
            self.blessed_inscriptions = blessed_inscriptions
        if chain is not None:
            self.chain = chain
        if cursed_inscriptions is not None:
            self.cursed_inscriptions = cursed_inscriptions
        if height is not None:
            self.height = height
        if inscriptions is not None:
            self.inscriptions = inscriptions
        if lost_sats is not None:
            self.lost_sats = lost_sats
        if minimum_rune_for_next_block is not None:
            self.minimum_rune_for_next_block = minimum_rune_for_next_block
        if runes is not None:
            self.runes = runes

    @property
    def blessed_inscriptions(self):
        """Gets the blessed_inscriptions of this StatusResponse.  # noqa: E501


        :return: The blessed_inscriptions of this StatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._blessed_inscriptions

    @blessed_inscriptions.setter
    def blessed_inscriptions(self, blessed_inscriptions):
        """Sets the blessed_inscriptions of this StatusResponse.


        :param blessed_inscriptions: The blessed_inscriptions of this StatusResponse.  # noqa: E501
        :type: int
        """

        self._blessed_inscriptions = blessed_inscriptions

    @property
    def chain(self):
        """Gets the chain of this StatusResponse.  # noqa: E501


        :return: The chain of this StatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this StatusResponse.


        :param chain: The chain of this StatusResponse.  # noqa: E501
        :type: str
        """

        self._chain = chain

    @property
    def cursed_inscriptions(self):
        """Gets the cursed_inscriptions of this StatusResponse.  # noqa: E501


        :return: The cursed_inscriptions of this StatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._cursed_inscriptions

    @cursed_inscriptions.setter
    def cursed_inscriptions(self, cursed_inscriptions):
        """Sets the cursed_inscriptions of this StatusResponse.


        :param cursed_inscriptions: The cursed_inscriptions of this StatusResponse.  # noqa: E501
        :type: int
        """

        self._cursed_inscriptions = cursed_inscriptions

    @property
    def height(self):
        """Gets the height of this StatusResponse.  # noqa: E501


        :return: The height of this StatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this StatusResponse.


        :param height: The height of this StatusResponse.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def inscriptions(self):
        """Gets the inscriptions of this StatusResponse.  # noqa: E501


        :return: The inscriptions of this StatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._inscriptions

    @inscriptions.setter
    def inscriptions(self, inscriptions):
        """Sets the inscriptions of this StatusResponse.


        :param inscriptions: The inscriptions of this StatusResponse.  # noqa: E501
        :type: int
        """

        self._inscriptions = inscriptions

    @property
    def lost_sats(self):
        """Gets the lost_sats of this StatusResponse.  # noqa: E501


        :return: The lost_sats of this StatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._lost_sats

    @lost_sats.setter
    def lost_sats(self, lost_sats):
        """Sets the lost_sats of this StatusResponse.


        :param lost_sats: The lost_sats of this StatusResponse.  # noqa: E501
        :type: int
        """

        self._lost_sats = lost_sats

    @property
    def minimum_rune_for_next_block(self):
        """Gets the minimum_rune_for_next_block of this StatusResponse.  # noqa: E501


        :return: The minimum_rune_for_next_block of this StatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._minimum_rune_for_next_block

    @minimum_rune_for_next_block.setter
    def minimum_rune_for_next_block(self, minimum_rune_for_next_block):
        """Sets the minimum_rune_for_next_block of this StatusResponse.


        :param minimum_rune_for_next_block: The minimum_rune_for_next_block of this StatusResponse.  # noqa: E501
        :type: str
        """

        self._minimum_rune_for_next_block = minimum_rune_for_next_block

    @property
    def runes(self):
        """Gets the runes of this StatusResponse.  # noqa: E501


        :return: The runes of this StatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._runes

    @runes.setter
    def runes(self, runes):
        """Sets the runes of this StatusResponse.


        :param runes: The runes of this StatusResponse.  # noqa: E501
        :type: int
        """

        self._runes = runes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
