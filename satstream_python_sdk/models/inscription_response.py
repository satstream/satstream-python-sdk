# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InscriptionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'charms': 'list[str]',
        'children': 'list[str]',
        'content_length': 'int',
        'content_type': 'str',
        'effective_content_type': 'str',
        'fee': 'int',
        'height': 'int',
        'id': 'str',
        'next': 'str',
        'number': 'int',
        'parents': 'list[str]',
        'previous': 'str',
        'rune': 'str',
        'sat': 'int',
        'satpoint': 'str',
        'timestamp': 'int',
        'value': 'int'
    }

    attribute_map = {
        'address': 'address',
        'charms': 'charms',
        'children': 'children',
        'content_length': 'content_length',
        'content_type': 'content_type',
        'effective_content_type': 'effective_content_type',
        'fee': 'fee',
        'height': 'height',
        'id': 'id',
        'next': 'next',
        'number': 'number',
        'parents': 'parents',
        'previous': 'previous',
        'rune': 'rune',
        'sat': 'sat',
        'satpoint': 'satpoint',
        'timestamp': 'timestamp',
        'value': 'value'
    }

    def __init__(self, address=None, charms=None, children=None, content_length=None, content_type=None, effective_content_type=None, fee=None, height=None, id=None, next=None, number=None, parents=None, previous=None, rune=None, sat=None, satpoint=None, timestamp=None, value=None):  # noqa: E501
        """InscriptionResponse - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._charms = None
        self._children = None
        self._content_length = None
        self._content_type = None
        self._effective_content_type = None
        self._fee = None
        self._height = None
        self._id = None
        self._next = None
        self._number = None
        self._parents = None
        self._previous = None
        self._rune = None
        self._sat = None
        self._satpoint = None
        self._timestamp = None
        self._value = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if charms is not None:
            self.charms = charms
        if children is not None:
            self.children = children
        if content_length is not None:
            self.content_length = content_length
        if content_type is not None:
            self.content_type = content_type
        if effective_content_type is not None:
            self.effective_content_type = effective_content_type
        if fee is not None:
            self.fee = fee
        if height is not None:
            self.height = height
        if id is not None:
            self.id = id
        if next is not None:
            self.next = next
        if number is not None:
            self.number = number
        if parents is not None:
            self.parents = parents
        if previous is not None:
            self.previous = previous
        if rune is not None:
            self.rune = rune
        if sat is not None:
            self.sat = sat
        if satpoint is not None:
            self.satpoint = satpoint
        if timestamp is not None:
            self.timestamp = timestamp
        if value is not None:
            self.value = value

    @property
    def address(self):
        """Gets the address of this InscriptionResponse.  # noqa: E501


        :return: The address of this InscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InscriptionResponse.


        :param address: The address of this InscriptionResponse.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def charms(self):
        """Gets the charms of this InscriptionResponse.  # noqa: E501


        :return: The charms of this InscriptionResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._charms

    @charms.setter
    def charms(self, charms):
        """Sets the charms of this InscriptionResponse.


        :param charms: The charms of this InscriptionResponse.  # noqa: E501
        :type: list[str]
        """

        self._charms = charms

    @property
    def children(self):
        """Gets the children of this InscriptionResponse.  # noqa: E501


        :return: The children of this InscriptionResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this InscriptionResponse.


        :param children: The children of this InscriptionResponse.  # noqa: E501
        :type: list[str]
        """

        self._children = children

    @property
    def content_length(self):
        """Gets the content_length of this InscriptionResponse.  # noqa: E501


        :return: The content_length of this InscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._content_length

    @content_length.setter
    def content_length(self, content_length):
        """Sets the content_length of this InscriptionResponse.


        :param content_length: The content_length of this InscriptionResponse.  # noqa: E501
        :type: int
        """

        self._content_length = content_length

    @property
    def content_type(self):
        """Gets the content_type of this InscriptionResponse.  # noqa: E501


        :return: The content_type of this InscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this InscriptionResponse.


        :param content_type: The content_type of this InscriptionResponse.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def effective_content_type(self):
        """Gets the effective_content_type of this InscriptionResponse.  # noqa: E501


        :return: The effective_content_type of this InscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._effective_content_type

    @effective_content_type.setter
    def effective_content_type(self, effective_content_type):
        """Sets the effective_content_type of this InscriptionResponse.


        :param effective_content_type: The effective_content_type of this InscriptionResponse.  # noqa: E501
        :type: str
        """

        self._effective_content_type = effective_content_type

    @property
    def fee(self):
        """Gets the fee of this InscriptionResponse.  # noqa: E501


        :return: The fee of this InscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this InscriptionResponse.


        :param fee: The fee of this InscriptionResponse.  # noqa: E501
        :type: int
        """

        self._fee = fee

    @property
    def height(self):
        """Gets the height of this InscriptionResponse.  # noqa: E501


        :return: The height of this InscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this InscriptionResponse.


        :param height: The height of this InscriptionResponse.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def id(self):
        """Gets the id of this InscriptionResponse.  # noqa: E501


        :return: The id of this InscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InscriptionResponse.


        :param id: The id of this InscriptionResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def next(self):
        """Gets the next of this InscriptionResponse.  # noqa: E501


        :return: The next of this InscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this InscriptionResponse.


        :param next: The next of this InscriptionResponse.  # noqa: E501
        :type: str
        """

        self._next = next

    @property
    def number(self):
        """Gets the number of this InscriptionResponse.  # noqa: E501


        :return: The number of this InscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this InscriptionResponse.


        :param number: The number of this InscriptionResponse.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def parents(self):
        """Gets the parents of this InscriptionResponse.  # noqa: E501


        :return: The parents of this InscriptionResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this InscriptionResponse.


        :param parents: The parents of this InscriptionResponse.  # noqa: E501
        :type: list[str]
        """

        self._parents = parents

    @property
    def previous(self):
        """Gets the previous of this InscriptionResponse.  # noqa: E501


        :return: The previous of this InscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._previous

    @previous.setter
    def previous(self, previous):
        """Sets the previous of this InscriptionResponse.


        :param previous: The previous of this InscriptionResponse.  # noqa: E501
        :type: str
        """

        self._previous = previous

    @property
    def rune(self):
        """Gets the rune of this InscriptionResponse.  # noqa: E501


        :return: The rune of this InscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._rune

    @rune.setter
    def rune(self, rune):
        """Sets the rune of this InscriptionResponse.


        :param rune: The rune of this InscriptionResponse.  # noqa: E501
        :type: str
        """

        self._rune = rune

    @property
    def sat(self):
        """Gets the sat of this InscriptionResponse.  # noqa: E501


        :return: The sat of this InscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._sat

    @sat.setter
    def sat(self, sat):
        """Sets the sat of this InscriptionResponse.


        :param sat: The sat of this InscriptionResponse.  # noqa: E501
        :type: int
        """

        self._sat = sat

    @property
    def satpoint(self):
        """Gets the satpoint of this InscriptionResponse.  # noqa: E501


        :return: The satpoint of this InscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._satpoint

    @satpoint.setter
    def satpoint(self, satpoint):
        """Sets the satpoint of this InscriptionResponse.


        :param satpoint: The satpoint of this InscriptionResponse.  # noqa: E501
        :type: str
        """

        self._satpoint = satpoint

    @property
    def timestamp(self):
        """Gets the timestamp of this InscriptionResponse.  # noqa: E501


        :return: The timestamp of this InscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this InscriptionResponse.


        :param timestamp: The timestamp of this InscriptionResponse.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def value(self):
        """Gets the value of this InscriptionResponse.  # noqa: E501


        :return: The value of this InscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InscriptionResponse.


        :param value: The value of this InscriptionResponse.  # noqa: E501
        :type: int
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InscriptionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InscriptionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
