# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input': 'int',
        'offset': 'int',
        'payload': 'GithubComSatstreamSsUtilsOrdServerResponsesInscriptionData',
        'pushnum': 'bool',
        'stutter': 'bool'
    }

    attribute_map = {
        'input': 'input',
        'offset': 'offset',
        'payload': 'payload',
        'pushnum': 'pushnum',
        'stutter': 'stutter'
    }

    def __init__(self, input=None, offset=None, payload=None, pushnum=None, stutter=None):  # noqa: E501
        """GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription - a model defined in Swagger"""  # noqa: E501
        self._input = None
        self._offset = None
        self._payload = None
        self._pushnum = None
        self._stutter = None
        self.discriminator = None
        if input is not None:
            self.input = input
        if offset is not None:
            self.offset = offset
        if payload is not None:
            self.payload = payload
        if pushnum is not None:
            self.pushnum = pushnum
        if stutter is not None:
            self.stutter = stutter

    @property
    def input(self):
        """Gets the input of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.  # noqa: E501


        :return: The input of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.  # noqa: E501
        :rtype: int
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.


        :param input: The input of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.  # noqa: E501
        :type: int
        """

        self._input = input

    @property
    def offset(self):
        """Gets the offset of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.  # noqa: E501


        :return: The offset of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.


        :param offset: The offset of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def payload(self):
        """Gets the payload of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.  # noqa: E501


        :return: The payload of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.  # noqa: E501
        :rtype: GithubComSatstreamSsUtilsOrdServerResponsesInscriptionData
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.


        :param payload: The payload of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.  # noqa: E501
        :type: GithubComSatstreamSsUtilsOrdServerResponsesInscriptionData
        """

        self._payload = payload

    @property
    def pushnum(self):
        """Gets the pushnum of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.  # noqa: E501


        :return: The pushnum of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.  # noqa: E501
        :rtype: bool
        """
        return self._pushnum

    @pushnum.setter
    def pushnum(self, pushnum):
        """Sets the pushnum of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.


        :param pushnum: The pushnum of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.  # noqa: E501
        :type: bool
        """

        self._pushnum = pushnum

    @property
    def stutter(self):
        """Gets the stutter of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.  # noqa: E501


        :return: The stutter of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.  # noqa: E501
        :rtype: bool
        """
        return self._stutter

    @stutter.setter
    def stutter(self, stutter):
        """Sets the stutter of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.


        :param stutter: The stutter of this GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription.  # noqa: E501
        :type: bool
        """

        self._stutter = stutter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComSatstreamSsUtilsOrdServerResponsesDecodedInscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
