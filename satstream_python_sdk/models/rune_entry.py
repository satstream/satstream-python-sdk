# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RuneEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block': 'int',
        'burned': 'int',
        'divisibility': 'int',
        'etching': 'str',
        'mints': 'int',
        'number': 'int',
        'premine': 'int',
        'spaced_rune': 'str',
        'symbol': 'str',
        'terms': 'RuneTerms',
        'timestamp': 'int',
        'turbo': 'bool'
    }

    attribute_map = {
        'block': 'block',
        'burned': 'burned',
        'divisibility': 'divisibility',
        'etching': 'etching',
        'mints': 'mints',
        'number': 'number',
        'premine': 'premine',
        'spaced_rune': 'spaced_rune',
        'symbol': 'symbol',
        'terms': 'terms',
        'timestamp': 'timestamp',
        'turbo': 'turbo'
    }

    def __init__(self, block=None, burned=None, divisibility=None, etching=None, mints=None, number=None, premine=None, spaced_rune=None, symbol=None, terms=None, timestamp=None, turbo=None):  # noqa: E501
        """RuneEntry - a model defined in Swagger"""  # noqa: E501
        self._block = None
        self._burned = None
        self._divisibility = None
        self._etching = None
        self._mints = None
        self._number = None
        self._premine = None
        self._spaced_rune = None
        self._symbol = None
        self._terms = None
        self._timestamp = None
        self._turbo = None
        self.discriminator = None
        if block is not None:
            self.block = block
        if burned is not None:
            self.burned = burned
        if divisibility is not None:
            self.divisibility = divisibility
        if etching is not None:
            self.etching = etching
        if mints is not None:
            self.mints = mints
        if number is not None:
            self.number = number
        if premine is not None:
            self.premine = premine
        if spaced_rune is not None:
            self.spaced_rune = spaced_rune
        if symbol is not None:
            self.symbol = symbol
        if terms is not None:
            self.terms = terms
        if timestamp is not None:
            self.timestamp = timestamp
        if turbo is not None:
            self.turbo = turbo

    @property
    def block(self):
        """Gets the block of this RuneEntry.  # noqa: E501


        :return: The block of this RuneEntry.  # noqa: E501
        :rtype: int
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this RuneEntry.


        :param block: The block of this RuneEntry.  # noqa: E501
        :type: int
        """

        self._block = block

    @property
    def burned(self):
        """Gets the burned of this RuneEntry.  # noqa: E501


        :return: The burned of this RuneEntry.  # noqa: E501
        :rtype: int
        """
        return self._burned

    @burned.setter
    def burned(self, burned):
        """Sets the burned of this RuneEntry.


        :param burned: The burned of this RuneEntry.  # noqa: E501
        :type: int
        """

        self._burned = burned

    @property
    def divisibility(self):
        """Gets the divisibility of this RuneEntry.  # noqa: E501


        :return: The divisibility of this RuneEntry.  # noqa: E501
        :rtype: int
        """
        return self._divisibility

    @divisibility.setter
    def divisibility(self, divisibility):
        """Sets the divisibility of this RuneEntry.


        :param divisibility: The divisibility of this RuneEntry.  # noqa: E501
        :type: int
        """

        self._divisibility = divisibility

    @property
    def etching(self):
        """Gets the etching of this RuneEntry.  # noqa: E501


        :return: The etching of this RuneEntry.  # noqa: E501
        :rtype: str
        """
        return self._etching

    @etching.setter
    def etching(self, etching):
        """Sets the etching of this RuneEntry.


        :param etching: The etching of this RuneEntry.  # noqa: E501
        :type: str
        """

        self._etching = etching

    @property
    def mints(self):
        """Gets the mints of this RuneEntry.  # noqa: E501


        :return: The mints of this RuneEntry.  # noqa: E501
        :rtype: int
        """
        return self._mints

    @mints.setter
    def mints(self, mints):
        """Sets the mints of this RuneEntry.


        :param mints: The mints of this RuneEntry.  # noqa: E501
        :type: int
        """

        self._mints = mints

    @property
    def number(self):
        """Gets the number of this RuneEntry.  # noqa: E501


        :return: The number of this RuneEntry.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this RuneEntry.


        :param number: The number of this RuneEntry.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def premine(self):
        """Gets the premine of this RuneEntry.  # noqa: E501


        :return: The premine of this RuneEntry.  # noqa: E501
        :rtype: int
        """
        return self._premine

    @premine.setter
    def premine(self, premine):
        """Sets the premine of this RuneEntry.


        :param premine: The premine of this RuneEntry.  # noqa: E501
        :type: int
        """

        self._premine = premine

    @property
    def spaced_rune(self):
        """Gets the spaced_rune of this RuneEntry.  # noqa: E501


        :return: The spaced_rune of this RuneEntry.  # noqa: E501
        :rtype: str
        """
        return self._spaced_rune

    @spaced_rune.setter
    def spaced_rune(self, spaced_rune):
        """Sets the spaced_rune of this RuneEntry.


        :param spaced_rune: The spaced_rune of this RuneEntry.  # noqa: E501
        :type: str
        """

        self._spaced_rune = spaced_rune

    @property
    def symbol(self):
        """Gets the symbol of this RuneEntry.  # noqa: E501


        :return: The symbol of this RuneEntry.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this RuneEntry.


        :param symbol: The symbol of this RuneEntry.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def terms(self):
        """Gets the terms of this RuneEntry.  # noqa: E501


        :return: The terms of this RuneEntry.  # noqa: E501
        :rtype: RuneTerms
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this RuneEntry.


        :param terms: The terms of this RuneEntry.  # noqa: E501
        :type: RuneTerms
        """

        self._terms = terms

    @property
    def timestamp(self):
        """Gets the timestamp of this RuneEntry.  # noqa: E501


        :return: The timestamp of this RuneEntry.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this RuneEntry.


        :param timestamp: The timestamp of this RuneEntry.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def turbo(self):
        """Gets the turbo of this RuneEntry.  # noqa: E501


        :return: The turbo of this RuneEntry.  # noqa: E501
        :rtype: bool
        """
        return self._turbo

    @turbo.setter
    def turbo(self, turbo):
        """Sets the turbo of this RuneEntry.


        :param turbo: The turbo of this RuneEntry.  # noqa: E501
        :type: bool
        """

        self._turbo = turbo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuneEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuneEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
