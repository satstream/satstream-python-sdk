# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error': 'str',
        'estimated_feerate': 'float',
        'estimated_vsize': 'int',
        'fee': 'float',
        'inputs': 'list[GithubComSatstreamSsUtilsBitcoinCliPSBTInputAnalysis]',
        'next': 'str'
    }

    attribute_map = {
        'error': 'error',
        'estimated_feerate': 'estimated_feerate',
        'estimated_vsize': 'estimated_vsize',
        'fee': 'fee',
        'inputs': 'inputs',
        'next': 'next'
    }

    def __init__(self, error=None, estimated_feerate=None, estimated_vsize=None, fee=None, inputs=None, next=None):  # noqa: E501
        """GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis - a model defined in Swagger"""  # noqa: E501
        self._error = None
        self._estimated_feerate = None
        self._estimated_vsize = None
        self._fee = None
        self._inputs = None
        self._next = None
        self.discriminator = None
        if error is not None:
            self.error = error
        if estimated_feerate is not None:
            self.estimated_feerate = estimated_feerate
        if estimated_vsize is not None:
            self.estimated_vsize = estimated_vsize
        if fee is not None:
            self.fee = fee
        if inputs is not None:
            self.inputs = inputs
        if next is not None:
            self.next = next

    @property
    def error(self):
        """Gets the error of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501


        :return: The error of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.


        :param error: The error of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def estimated_feerate(self):
        """Gets the estimated_feerate of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501


        :return: The estimated_feerate of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._estimated_feerate

    @estimated_feerate.setter
    def estimated_feerate(self, estimated_feerate):
        """Sets the estimated_feerate of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.


        :param estimated_feerate: The estimated_feerate of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501
        :type: float
        """

        self._estimated_feerate = estimated_feerate

    @property
    def estimated_vsize(self):
        """Gets the estimated_vsize of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501


        :return: The estimated_vsize of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._estimated_vsize

    @estimated_vsize.setter
    def estimated_vsize(self, estimated_vsize):
        """Sets the estimated_vsize of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.


        :param estimated_vsize: The estimated_vsize of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501
        :type: int
        """

        self._estimated_vsize = estimated_vsize

    @property
    def fee(self):
        """Gets the fee of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501


        :return: The fee of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.


        :param fee: The fee of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501
        :type: float
        """

        self._fee = fee

    @property
    def inputs(self):
        """Gets the inputs of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501


        :return: The inputs of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501
        :rtype: list[GithubComSatstreamSsUtilsBitcoinCliPSBTInputAnalysis]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.


        :param inputs: The inputs of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501
        :type: list[GithubComSatstreamSsUtilsBitcoinCliPSBTInputAnalysis]
        """

        self._inputs = inputs

    @property
    def next(self):
        """Gets the next of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501


        :return: The next of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.


        :param next: The next of this GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis.  # noqa: E501
        :type: str
        """

        self._next = next

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComSatstreamSsUtilsBitcoinCliPSBTAnalysis):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
