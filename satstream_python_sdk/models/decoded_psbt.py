# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DecodedPSBT(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fee': 'float',
        'inputs': 'list[DecodedPSBTInput]',
        'outputs': 'list[DecodedPSBTOutput]',
        'tx': 'AllOfDecodedPSBTTx',
        'unknown': 'dict(str, object)'
    }

    attribute_map = {
        'fee': 'fee',
        'inputs': 'inputs',
        'outputs': 'outputs',
        'tx': 'tx',
        'unknown': 'unknown'
    }

    def __init__(self, fee=None, inputs=None, outputs=None, tx=None, unknown=None):  # noqa: E501
        """DecodedPSBT - a model defined in Swagger"""  # noqa: E501
        self._fee = None
        self._inputs = None
        self._outputs = None
        self._tx = None
        self._unknown = None
        self.discriminator = None
        if fee is not None:
            self.fee = fee
        if inputs is not None:
            self.inputs = inputs
        if outputs is not None:
            self.outputs = outputs
        if tx is not None:
            self.tx = tx
        if unknown is not None:
            self.unknown = unknown

    @property
    def fee(self):
        """Gets the fee of this DecodedPSBT.  # noqa: E501

        The transaction fee paid if all UTXOs slots are filled  # noqa: E501

        :return: The fee of this DecodedPSBT.  # noqa: E501
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this DecodedPSBT.

        The transaction fee paid if all UTXOs slots are filled  # noqa: E501

        :param fee: The fee of this DecodedPSBT.  # noqa: E501
        :type: float
        """

        self._fee = fee

    @property
    def inputs(self):
        """Gets the inputs of this DecodedPSBT.  # noqa: E501

        Array of inputs  # noqa: E501

        :return: The inputs of this DecodedPSBT.  # noqa: E501
        :rtype: list[DecodedPSBTInput]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this DecodedPSBT.

        Array of inputs  # noqa: E501

        :param inputs: The inputs of this DecodedPSBT.  # noqa: E501
        :type: list[DecodedPSBTInput]
        """

        self._inputs = inputs

    @property
    def outputs(self):
        """Gets the outputs of this DecodedPSBT.  # noqa: E501

        Array of outputs  # noqa: E501

        :return: The outputs of this DecodedPSBT.  # noqa: E501
        :rtype: list[DecodedPSBTOutput]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this DecodedPSBT.

        Array of outputs  # noqa: E501

        :param outputs: The outputs of this DecodedPSBT.  # noqa: E501
        :type: list[DecodedPSBTOutput]
        """

        self._outputs = outputs

    @property
    def tx(self):
        """Gets the tx of this DecodedPSBT.  # noqa: E501

        The decoded network-serialized unsigned transaction  # noqa: E501

        :return: The tx of this DecodedPSBT.  # noqa: E501
        :rtype: AllOfDecodedPSBTTx
        """
        return self._tx

    @tx.setter
    def tx(self, tx):
        """Sets the tx of this DecodedPSBT.

        The decoded network-serialized unsigned transaction  # noqa: E501

        :param tx: The tx of this DecodedPSBT.  # noqa: E501
        :type: AllOfDecodedPSBTTx
        """

        self._tx = tx

    @property
    def unknown(self):
        """Gets the unknown of this DecodedPSBT.  # noqa: E501

        The unknown global fields  # noqa: E501

        :return: The unknown of this DecodedPSBT.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._unknown

    @unknown.setter
    def unknown(self, unknown):
        """Sets the unknown of this DecodedPSBT.

        The unknown global fields  # noqa: E501

        :param unknown: The unknown of this DecodedPSBT.  # noqa: E501
        :type: dict(str, object)
        """

        self._unknown = unknown

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DecodedPSBT, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DecodedPSBT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
