# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RunestoneData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'edicts': 'list[list[int]]',
        'etching': 'str',
        'mint': 'str',
        'pointer': 'int'
    }

    attribute_map = {
        'edicts': 'edicts',
        'etching': 'etching',
        'mint': 'mint',
        'pointer': 'pointer'
    }

    def __init__(self, edicts=None, etching=None, mint=None, pointer=None):  # noqa: E501
        """RunestoneData - a model defined in Swagger"""  # noqa: E501
        self._edicts = None
        self._etching = None
        self._mint = None
        self._pointer = None
        self.discriminator = None
        if edicts is not None:
            self.edicts = edicts
        if etching is not None:
            self.etching = etching
        if mint is not None:
            self.mint = mint
        if pointer is not None:
            self.pointer = pointer

    @property
    def edicts(self):
        """Gets the edicts of this RunestoneData.  # noqa: E501


        :return: The edicts of this RunestoneData.  # noqa: E501
        :rtype: list[list[int]]
        """
        return self._edicts

    @edicts.setter
    def edicts(self, edicts):
        """Sets the edicts of this RunestoneData.


        :param edicts: The edicts of this RunestoneData.  # noqa: E501
        :type: list[list[int]]
        """

        self._edicts = edicts

    @property
    def etching(self):
        """Gets the etching of this RunestoneData.  # noqa: E501


        :return: The etching of this RunestoneData.  # noqa: E501
        :rtype: str
        """
        return self._etching

    @etching.setter
    def etching(self, etching):
        """Sets the etching of this RunestoneData.


        :param etching: The etching of this RunestoneData.  # noqa: E501
        :type: str
        """

        self._etching = etching

    @property
    def mint(self):
        """Gets the mint of this RunestoneData.  # noqa: E501


        :return: The mint of this RunestoneData.  # noqa: E501
        :rtype: str
        """
        return self._mint

    @mint.setter
    def mint(self, mint):
        """Sets the mint of this RunestoneData.


        :param mint: The mint of this RunestoneData.  # noqa: E501
        :type: str
        """

        self._mint = mint

    @property
    def pointer(self):
        """Gets the pointer of this RunestoneData.  # noqa: E501


        :return: The pointer of this RunestoneData.  # noqa: E501
        :rtype: int
        """
        return self._pointer

    @pointer.setter
    def pointer(self, pointer):
        """Sets the pointer of this RunestoneData.


        :param pointer: The pointer of this RunestoneData.  # noqa: E501
        :type: int
        """

        self._pointer = pointer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunestoneData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunestoneData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
