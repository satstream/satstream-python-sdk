# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValidateAddressResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'error': 'str',
        'error_locations': 'list[int]',
        'isscript': 'bool',
        'isvalid': 'bool',
        'iswitness': 'bool',
        'script_pub_key': 'str',
        'witness_program': 'str',
        'witness_version': 'int'
    }

    attribute_map = {
        'address': 'address',
        'error': 'error',
        'error_locations': 'error_locations',
        'isscript': 'isscript',
        'isvalid': 'isvalid',
        'iswitness': 'iswitness',
        'script_pub_key': 'scriptPubKey',
        'witness_program': 'witness_program',
        'witness_version': 'witness_version'
    }

    def __init__(self, address=None, error=None, error_locations=None, isscript=None, isvalid=None, iswitness=None, script_pub_key=None, witness_program=None, witness_version=None):  # noqa: E501
        """ValidateAddressResult - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._error = None
        self._error_locations = None
        self._isscript = None
        self._isvalid = None
        self._iswitness = None
        self._script_pub_key = None
        self._witness_program = None
        self._witness_version = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if error is not None:
            self.error = error
        if error_locations is not None:
            self.error_locations = error_locations
        if isscript is not None:
            self.isscript = isscript
        if isvalid is not None:
            self.isvalid = isvalid
        if iswitness is not None:
            self.iswitness = iswitness
        if script_pub_key is not None:
            self.script_pub_key = script_pub_key
        if witness_program is not None:
            self.witness_program = witness_program
        if witness_version is not None:
            self.witness_version = witness_version

    @property
    def address(self):
        """Gets the address of this ValidateAddressResult.  # noqa: E501

        The bitcoin address validated  # noqa: E501

        :return: The address of this ValidateAddressResult.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ValidateAddressResult.

        The bitcoin address validated  # noqa: E501

        :param address: The address of this ValidateAddressResult.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def error(self):
        """Gets the error of this ValidateAddressResult.  # noqa: E501

        Error message, if any  # noqa: E501

        :return: The error of this ValidateAddressResult.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ValidateAddressResult.

        Error message, if any  # noqa: E501

        :param error: The error of this ValidateAddressResult.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def error_locations(self):
        """Gets the error_locations of this ValidateAddressResult.  # noqa: E501

        Indices of likely error locations  # noqa: E501

        :return: The error_locations of this ValidateAddressResult.  # noqa: E501
        :rtype: list[int]
        """
        return self._error_locations

    @error_locations.setter
    def error_locations(self, error_locations):
        """Sets the error_locations of this ValidateAddressResult.

        Indices of likely error locations  # noqa: E501

        :param error_locations: The error_locations of this ValidateAddressResult.  # noqa: E501
        :type: list[int]
        """

        self._error_locations = error_locations

    @property
    def isscript(self):
        """Gets the isscript of this ValidateAddressResult.  # noqa: E501

        If the key is a script  # noqa: E501

        :return: The isscript of this ValidateAddressResult.  # noqa: E501
        :rtype: bool
        """
        return self._isscript

    @isscript.setter
    def isscript(self, isscript):
        """Sets the isscript of this ValidateAddressResult.

        If the key is a script  # noqa: E501

        :param isscript: The isscript of this ValidateAddressResult.  # noqa: E501
        :type: bool
        """

        self._isscript = isscript

    @property
    def isvalid(self):
        """Gets the isvalid of this ValidateAddressResult.  # noqa: E501

        If the address is valid or not  # noqa: E501

        :return: The isvalid of this ValidateAddressResult.  # noqa: E501
        :rtype: bool
        """
        return self._isvalid

    @isvalid.setter
    def isvalid(self, isvalid):
        """Sets the isvalid of this ValidateAddressResult.

        If the address is valid or not  # noqa: E501

        :param isvalid: The isvalid of this ValidateAddressResult.  # noqa: E501
        :type: bool
        """

        self._isvalid = isvalid

    @property
    def iswitness(self):
        """Gets the iswitness of this ValidateAddressResult.  # noqa: E501

        If the address is a witness address  # noqa: E501

        :return: The iswitness of this ValidateAddressResult.  # noqa: E501
        :rtype: bool
        """
        return self._iswitness

    @iswitness.setter
    def iswitness(self, iswitness):
        """Sets the iswitness of this ValidateAddressResult.

        If the address is a witness address  # noqa: E501

        :param iswitness: The iswitness of this ValidateAddressResult.  # noqa: E501
        :type: bool
        """

        self._iswitness = iswitness

    @property
    def script_pub_key(self):
        """Gets the script_pub_key of this ValidateAddressResult.  # noqa: E501

        The hex-encoded scriptPubKey  # noqa: E501

        :return: The script_pub_key of this ValidateAddressResult.  # noqa: E501
        :rtype: str
        """
        return self._script_pub_key

    @script_pub_key.setter
    def script_pub_key(self, script_pub_key):
        """Sets the script_pub_key of this ValidateAddressResult.

        The hex-encoded scriptPubKey  # noqa: E501

        :param script_pub_key: The script_pub_key of this ValidateAddressResult.  # noqa: E501
        :type: str
        """

        self._script_pub_key = script_pub_key

    @property
    def witness_program(self):
        """Gets the witness_program of this ValidateAddressResult.  # noqa: E501

        The hex value of the witness program  # noqa: E501

        :return: The witness_program of this ValidateAddressResult.  # noqa: E501
        :rtype: str
        """
        return self._witness_program

    @witness_program.setter
    def witness_program(self, witness_program):
        """Sets the witness_program of this ValidateAddressResult.

        The hex value of the witness program  # noqa: E501

        :param witness_program: The witness_program of this ValidateAddressResult.  # noqa: E501
        :type: str
        """

        self._witness_program = witness_program

    @property
    def witness_version(self):
        """Gets the witness_version of this ValidateAddressResult.  # noqa: E501

        The version number of the witness program  # noqa: E501

        :return: The witness_version of this ValidateAddressResult.  # noqa: E501
        :rtype: int
        """
        return self._witness_version

    @witness_version.setter
    def witness_version(self, witness_version):
        """Sets the witness_version of this ValidateAddressResult.

        The version number of the witness program  # noqa: E501

        :param witness_version: The witness_version of this ValidateAddressResult.  # noqa: E501
        :type: int
        """

        self._witness_version = witness_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidateAddressResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidateAddressResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
