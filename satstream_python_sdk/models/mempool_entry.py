# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MempoolEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ancestorcount': 'int',
        'ancestorsize': 'int',
        'bip125_replaceable': 'bool',
        'depends': 'list[str]',
        'descendantcount': 'int',
        'descendantsize': 'int',
        'fees': 'AllOfMempoolEntryFees',
        'height': 'int',
        'spentby': 'list[str]',
        'time': 'int',
        'unbroadcast': 'bool',
        'vsize': 'int',
        'weight': 'int',
        'wtxid': 'str'
    }

    attribute_map = {
        'ancestorcount': 'ancestorcount',
        'ancestorsize': 'ancestorsize',
        'bip125_replaceable': 'bip125-replaceable',
        'depends': 'depends',
        'descendantcount': 'descendantcount',
        'descendantsize': 'descendantsize',
        'fees': 'fees',
        'height': 'height',
        'spentby': 'spentby',
        'time': 'time',
        'unbroadcast': 'unbroadcast',
        'vsize': 'vsize',
        'weight': 'weight',
        'wtxid': 'wtxid'
    }

    def __init__(self, ancestorcount=None, ancestorsize=None, bip125_replaceable=None, depends=None, descendantcount=None, descendantsize=None, fees=None, height=None, spentby=None, time=None, unbroadcast=None, vsize=None, weight=None, wtxid=None):  # noqa: E501
        """MempoolEntry - a model defined in Swagger"""  # noqa: E501
        self._ancestorcount = None
        self._ancestorsize = None
        self._bip125_replaceable = None
        self._depends = None
        self._descendantcount = None
        self._descendantsize = None
        self._fees = None
        self._height = None
        self._spentby = None
        self._time = None
        self._unbroadcast = None
        self._vsize = None
        self._weight = None
        self._wtxid = None
        self.discriminator = None
        if ancestorcount is not None:
            self.ancestorcount = ancestorcount
        if ancestorsize is not None:
            self.ancestorsize = ancestorsize
        if bip125_replaceable is not None:
            self.bip125_replaceable = bip125_replaceable
        if depends is not None:
            self.depends = depends
        if descendantcount is not None:
            self.descendantcount = descendantcount
        if descendantsize is not None:
            self.descendantsize = descendantsize
        if fees is not None:
            self.fees = fees
        if height is not None:
            self.height = height
        if spentby is not None:
            self.spentby = spentby
        if time is not None:
            self.time = time
        if unbroadcast is not None:
            self.unbroadcast = unbroadcast
        if vsize is not None:
            self.vsize = vsize
        if weight is not None:
            self.weight = weight
        if wtxid is not None:
            self.wtxid = wtxid

    @property
    def ancestorcount(self):
        """Gets the ancestorcount of this MempoolEntry.  # noqa: E501

        Number of in-mempool ancestor transactions  # noqa: E501

        :return: The ancestorcount of this MempoolEntry.  # noqa: E501
        :rtype: int
        """
        return self._ancestorcount

    @ancestorcount.setter
    def ancestorcount(self, ancestorcount):
        """Sets the ancestorcount of this MempoolEntry.

        Number of in-mempool ancestor transactions  # noqa: E501

        :param ancestorcount: The ancestorcount of this MempoolEntry.  # noqa: E501
        :type: int
        """

        self._ancestorcount = ancestorcount

    @property
    def ancestorsize(self):
        """Gets the ancestorsize of this MempoolEntry.  # noqa: E501

        Virtual size of in-mempool ancestors  # noqa: E501

        :return: The ancestorsize of this MempoolEntry.  # noqa: E501
        :rtype: int
        """
        return self._ancestorsize

    @ancestorsize.setter
    def ancestorsize(self, ancestorsize):
        """Sets the ancestorsize of this MempoolEntry.

        Virtual size of in-mempool ancestors  # noqa: E501

        :param ancestorsize: The ancestorsize of this MempoolEntry.  # noqa: E501
        :type: int
        """

        self._ancestorsize = ancestorsize

    @property
    def bip125_replaceable(self):
        """Gets the bip125_replaceable of this MempoolEntry.  # noqa: E501

        Whether this transaction is replaceable  # noqa: E501

        :return: The bip125_replaceable of this MempoolEntry.  # noqa: E501
        :rtype: bool
        """
        return self._bip125_replaceable

    @bip125_replaceable.setter
    def bip125_replaceable(self, bip125_replaceable):
        """Sets the bip125_replaceable of this MempoolEntry.

        Whether this transaction is replaceable  # noqa: E501

        :param bip125_replaceable: The bip125_replaceable of this MempoolEntry.  # noqa: E501
        :type: bool
        """

        self._bip125_replaceable = bip125_replaceable

    @property
    def depends(self):
        """Gets the depends of this MempoolEntry.  # noqa: E501

        Parent transaction IDs  # noqa: E501

        :return: The depends of this MempoolEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._depends

    @depends.setter
    def depends(self, depends):
        """Sets the depends of this MempoolEntry.

        Parent transaction IDs  # noqa: E501

        :param depends: The depends of this MempoolEntry.  # noqa: E501
        :type: list[str]
        """

        self._depends = depends

    @property
    def descendantcount(self):
        """Gets the descendantcount of this MempoolEntry.  # noqa: E501

        Number of in-mempool descendant transactions  # noqa: E501

        :return: The descendantcount of this MempoolEntry.  # noqa: E501
        :rtype: int
        """
        return self._descendantcount

    @descendantcount.setter
    def descendantcount(self, descendantcount):
        """Sets the descendantcount of this MempoolEntry.

        Number of in-mempool descendant transactions  # noqa: E501

        :param descendantcount: The descendantcount of this MempoolEntry.  # noqa: E501
        :type: int
        """

        self._descendantcount = descendantcount

    @property
    def descendantsize(self):
        """Gets the descendantsize of this MempoolEntry.  # noqa: E501

        Virtual size of in-mempool descendants  # noqa: E501

        :return: The descendantsize of this MempoolEntry.  # noqa: E501
        :rtype: int
        """
        return self._descendantsize

    @descendantsize.setter
    def descendantsize(self, descendantsize):
        """Sets the descendantsize of this MempoolEntry.

        Virtual size of in-mempool descendants  # noqa: E501

        :param descendantsize: The descendantsize of this MempoolEntry.  # noqa: E501
        :type: int
        """

        self._descendantsize = descendantsize

    @property
    def fees(self):
        """Gets the fees of this MempoolEntry.  # noqa: E501

        Fee information  # noqa: E501

        :return: The fees of this MempoolEntry.  # noqa: E501
        :rtype: AllOfMempoolEntryFees
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this MempoolEntry.

        Fee information  # noqa: E501

        :param fees: The fees of this MempoolEntry.  # noqa: E501
        :type: AllOfMempoolEntryFees
        """

        self._fees = fees

    @property
    def height(self):
        """Gets the height of this MempoolEntry.  # noqa: E501

        Block height when transaction entered pool  # noqa: E501

        :return: The height of this MempoolEntry.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this MempoolEntry.

        Block height when transaction entered pool  # noqa: E501

        :param height: The height of this MempoolEntry.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def spentby(self):
        """Gets the spentby of this MempoolEntry.  # noqa: E501

        Child transaction IDs  # noqa: E501

        :return: The spentby of this MempoolEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._spentby

    @spentby.setter
    def spentby(self, spentby):
        """Sets the spentby of this MempoolEntry.

        Child transaction IDs  # noqa: E501

        :param spentby: The spentby of this MempoolEntry.  # noqa: E501
        :type: list[str]
        """

        self._spentby = spentby

    @property
    def time(self):
        """Gets the time of this MempoolEntry.  # noqa: E501

        Time transaction entered pool  # noqa: E501

        :return: The time of this MempoolEntry.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this MempoolEntry.

        Time transaction entered pool  # noqa: E501

        :param time: The time of this MempoolEntry.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def unbroadcast(self):
        """Gets the unbroadcast of this MempoolEntry.  # noqa: E501

        Whether this transaction is currently unbroadcast  # noqa: E501

        :return: The unbroadcast of this MempoolEntry.  # noqa: E501
        :rtype: bool
        """
        return self._unbroadcast

    @unbroadcast.setter
    def unbroadcast(self, unbroadcast):
        """Sets the unbroadcast of this MempoolEntry.

        Whether this transaction is currently unbroadcast  # noqa: E501

        :param unbroadcast: The unbroadcast of this MempoolEntry.  # noqa: E501
        :type: bool
        """

        self._unbroadcast = unbroadcast

    @property
    def vsize(self):
        """Gets the vsize of this MempoolEntry.  # noqa: E501

        Virtual transaction size  # noqa: E501

        :return: The vsize of this MempoolEntry.  # noqa: E501
        :rtype: int
        """
        return self._vsize

    @vsize.setter
    def vsize(self, vsize):
        """Sets the vsize of this MempoolEntry.

        Virtual transaction size  # noqa: E501

        :param vsize: The vsize of this MempoolEntry.  # noqa: E501
        :type: int
        """

        self._vsize = vsize

    @property
    def weight(self):
        """Gets the weight of this MempoolEntry.  # noqa: E501

        Transaction weight  # noqa: E501

        :return: The weight of this MempoolEntry.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this MempoolEntry.

        Transaction weight  # noqa: E501

        :param weight: The weight of this MempoolEntry.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def wtxid(self):
        """Gets the wtxid of this MempoolEntry.  # noqa: E501

        Hash of serialized transaction with witness data  # noqa: E501

        :return: The wtxid of this MempoolEntry.  # noqa: E501
        :rtype: str
        """
        return self._wtxid

    @wtxid.setter
    def wtxid(self, wtxid):
        """Sets the wtxid of this MempoolEntry.

        Hash of serialized transaction with witness data  # noqa: E501

        :param wtxid: The wtxid of this MempoolEntry.  # noqa: E501
        :type: str
        """

        self._wtxid = wtxid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MempoolEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MempoolEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
