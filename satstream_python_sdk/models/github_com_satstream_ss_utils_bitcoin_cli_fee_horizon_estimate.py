# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'decay': 'float',
        'errors': 'list[str]',
        'fail': 'AllOfgithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimateFail',
        'feerate': 'float',
        '_pass': 'AllOfgithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimatePass',
        'scale': 'float'
    }

    attribute_map = {
        'decay': 'decay',
        'errors': 'errors',
        'fail': 'fail',
        'feerate': 'feerate',
        '_pass': 'pass',
        'scale': 'scale'
    }

    def __init__(self, decay=None, errors=None, fail=None, feerate=None, _pass=None, scale=None):  # noqa: E501
        """GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate - a model defined in Swagger"""  # noqa: E501
        self._decay = None
        self._errors = None
        self._fail = None
        self._feerate = None
        self.__pass = None
        self._scale = None
        self.discriminator = None
        if decay is not None:
            self.decay = decay
        if errors is not None:
            self.errors = errors
        if fail is not None:
            self.fail = fail
        if feerate is not None:
            self.feerate = feerate
        if _pass is not None:
            self._pass = _pass
        if scale is not None:
            self.scale = scale

    @property
    def decay(self):
        """Gets the decay of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501

        Exponential decay (per block) for historical moving average  # noqa: E501

        :return: The decay of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501
        :rtype: float
        """
        return self._decay

    @decay.setter
    def decay(self, decay):
        """Sets the decay of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.

        Exponential decay (per block) for historical moving average  # noqa: E501

        :param decay: The decay of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501
        :type: float
        """

        self._decay = decay

    @property
    def errors(self):
        """Gets the errors of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501

        Errors encountered during processing  # noqa: E501

        :return: The errors of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.

        Errors encountered during processing  # noqa: E501

        :param errors: The errors of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    @property
    def fail(self):
        """Gets the fail of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501

        Information about highest range of feerates to fail  # noqa: E501

        :return: The fail of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501
        :rtype: AllOfgithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimateFail
        """
        return self._fail

    @fail.setter
    def fail(self, fail):
        """Sets the fail of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.

        Information about highest range of feerates to fail  # noqa: E501

        :param fail: The fail of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501
        :type: AllOfgithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimateFail
        """

        self._fail = fail

    @property
    def feerate(self):
        """Gets the feerate of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501

        Estimate fee rate in BTC/kvB  # noqa: E501

        :return: The feerate of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501
        :rtype: float
        """
        return self._feerate

    @feerate.setter
    def feerate(self, feerate):
        """Sets the feerate of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.

        Estimate fee rate in BTC/kvB  # noqa: E501

        :param feerate: The feerate of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501
        :type: float
        """

        self._feerate = feerate

    @property
    def _pass(self):
        """Gets the _pass of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501

        Information about lowest range of feerates to succeed  # noqa: E501

        :return: The _pass of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501
        :rtype: AllOfgithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimatePass
        """
        return self.__pass

    @_pass.setter
    def _pass(self, _pass):
        """Sets the _pass of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.

        Information about lowest range of feerates to succeed  # noqa: E501

        :param _pass: The _pass of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501
        :type: AllOfgithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimatePass
        """

        self.__pass = _pass

    @property
    def scale(self):
        """Gets the scale of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501

        Resolution of confirmation targets at this time horizon  # noqa: E501

        :return: The scale of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501
        :rtype: float
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.

        Resolution of confirmation targets at this time horizon  # noqa: E501

        :param scale: The scale of this GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate.  # noqa: E501
        :type: float
        """

        self._scale = scale

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
