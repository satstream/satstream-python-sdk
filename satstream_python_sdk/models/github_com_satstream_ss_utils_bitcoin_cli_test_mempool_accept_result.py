# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed': 'bool',
        'fees': 'AllOfgithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResultFees',
        'package_error': 'str',
        'reject_reason': 'str',
        'txid': 'str',
        'vsize': 'int',
        'wtxid': 'str'
    }

    attribute_map = {
        'allowed': 'allowed',
        'fees': 'fees',
        'package_error': 'package-error',
        'reject_reason': 'reject-reason',
        'txid': 'txid',
        'vsize': 'vsize',
        'wtxid': 'wtxid'
    }

    def __init__(self, allowed=None, fees=None, package_error=None, reject_reason=None, txid=None, vsize=None, wtxid=None):  # noqa: E501
        """GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult - a model defined in Swagger"""  # noqa: E501
        self._allowed = None
        self._fees = None
        self._package_error = None
        self._reject_reason = None
        self._txid = None
        self._vsize = None
        self._wtxid = None
        self.discriminator = None
        if allowed is not None:
            self.allowed = allowed
        if fees is not None:
            self.fees = fees
        if package_error is not None:
            self.package_error = package_error
        if reject_reason is not None:
            self.reject_reason = reject_reason
        if txid is not None:
            self.txid = txid
        if vsize is not None:
            self.vsize = vsize
        if wtxid is not None:
            self.wtxid = wtxid

    @property
    def allowed(self):
        """Gets the allowed of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501

        Whether this tx would be accepted to the mempool  # noqa: E501

        :return: The allowed of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501
        :rtype: bool
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.

        Whether this tx would be accepted to the mempool  # noqa: E501

        :param allowed: The allowed of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501
        :type: bool
        """

        self._allowed = allowed

    @property
    def fees(self):
        """Gets the fees of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501

        Transaction fees  # noqa: E501

        :return: The fees of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501
        :rtype: AllOfgithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResultFees
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.

        Transaction fees  # noqa: E501

        :param fees: The fees of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501
        :type: AllOfgithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResultFees
        """

        self._fees = fees

    @property
    def package_error(self):
        """Gets the package_error of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501

        Package validation error, if any  # noqa: E501

        :return: The package_error of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501
        :rtype: str
        """
        return self._package_error

    @package_error.setter
    def package_error(self, package_error):
        """Sets the package_error of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.

        Package validation error, if any  # noqa: E501

        :param package_error: The package_error of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501
        :type: str
        """

        self._package_error = package_error

    @property
    def reject_reason(self):
        """Gets the reject_reason of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501

        Rejection string  # noqa: E501

        :return: The reject_reason of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501
        :rtype: str
        """
        return self._reject_reason

    @reject_reason.setter
    def reject_reason(self, reject_reason):
        """Sets the reject_reason of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.

        Rejection string  # noqa: E501

        :param reject_reason: The reject_reason of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501
        :type: str
        """

        self._reject_reason = reject_reason

    @property
    def txid(self):
        """Gets the txid of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501

        The transaction hash in hex  # noqa: E501

        :return: The txid of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501
        :rtype: str
        """
        return self._txid

    @txid.setter
    def txid(self, txid):
        """Sets the txid of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.

        The transaction hash in hex  # noqa: E501

        :param txid: The txid of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501
        :type: str
        """

        self._txid = txid

    @property
    def vsize(self):
        """Gets the vsize of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501

        Virtual transaction size as defined in BIP 141  # noqa: E501

        :return: The vsize of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501
        :rtype: int
        """
        return self._vsize

    @vsize.setter
    def vsize(self, vsize):
        """Sets the vsize of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.

        Virtual transaction size as defined in BIP 141  # noqa: E501

        :param vsize: The vsize of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501
        :type: int
        """

        self._vsize = vsize

    @property
    def wtxid(self):
        """Gets the wtxid of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501

        The transaction witness hash in hex  # noqa: E501

        :return: The wtxid of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501
        :rtype: str
        """
        return self._wtxid

    @wtxid.setter
    def wtxid(self, wtxid):
        """Sets the wtxid of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.

        The transaction witness hash in hex  # noqa: E501

        :param wtxid: The wtxid of this GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult.  # noqa: E501
        :type: str
        """

        self._wtxid = wtxid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
