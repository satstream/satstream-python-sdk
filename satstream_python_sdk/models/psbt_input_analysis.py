# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PSBTInputAnalysis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_utxo': 'bool',
        'is_final': 'bool',
        'missing': 'PSBTMissingData',
        'next': 'str'
    }

    attribute_map = {
        'has_utxo': 'has_utxo',
        'is_final': 'is_final',
        'missing': 'missing',
        'next': 'next'
    }

    def __init__(self, has_utxo=None, is_final=None, missing=None, next=None):  # noqa: E501
        """PSBTInputAnalysis - a model defined in Swagger"""  # noqa: E501
        self._has_utxo = None
        self._is_final = None
        self._missing = None
        self._next = None
        self.discriminator = None
        if has_utxo is not None:
            self.has_utxo = has_utxo
        if is_final is not None:
            self.is_final = is_final
        if missing is not None:
            self.missing = missing
        if next is not None:
            self.next = next

    @property
    def has_utxo(self):
        """Gets the has_utxo of this PSBTInputAnalysis.  # noqa: E501


        :return: The has_utxo of this PSBTInputAnalysis.  # noqa: E501
        :rtype: bool
        """
        return self._has_utxo

    @has_utxo.setter
    def has_utxo(self, has_utxo):
        """Sets the has_utxo of this PSBTInputAnalysis.


        :param has_utxo: The has_utxo of this PSBTInputAnalysis.  # noqa: E501
        :type: bool
        """

        self._has_utxo = has_utxo

    @property
    def is_final(self):
        """Gets the is_final of this PSBTInputAnalysis.  # noqa: E501


        :return: The is_final of this PSBTInputAnalysis.  # noqa: E501
        :rtype: bool
        """
        return self._is_final

    @is_final.setter
    def is_final(self, is_final):
        """Sets the is_final of this PSBTInputAnalysis.


        :param is_final: The is_final of this PSBTInputAnalysis.  # noqa: E501
        :type: bool
        """

        self._is_final = is_final

    @property
    def missing(self):
        """Gets the missing of this PSBTInputAnalysis.  # noqa: E501


        :return: The missing of this PSBTInputAnalysis.  # noqa: E501
        :rtype: PSBTMissingData
        """
        return self._missing

    @missing.setter
    def missing(self, missing):
        """Sets the missing of this PSBTInputAnalysis.


        :param missing: The missing of this PSBTInputAnalysis.  # noqa: E501
        :type: PSBTMissingData
        """

        self._missing = missing

    @property
    def next(self):
        """Gets the next of this PSBTInputAnalysis.  # noqa: E501


        :return: The next of this PSBTInputAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this PSBTInputAnalysis.


        :param next: The next of this PSBTInputAnalysis.  # noqa: E501
        :type: str
        """

        self._next = next

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PSBTInputAnalysis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PSBTInputAnalysis):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
