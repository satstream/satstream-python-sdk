# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GithubComSatstreamSsUtilsBitcoinCliBtcTx3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fee': 'float',
        'hash': 'str',
        'hex': 'str',
        'locktime': 'int',
        'size': 'int',
        'txid': 'str',
        'version': 'int',
        'vin': 'list[GithubComSatstreamSsUtilsBitcoinCliBlockVin3]',
        'vout': 'list[GithubComSatstreamSsUtilsBitcoinCliVout]',
        'vsize': 'int',
        'weight': 'int'
    }

    attribute_map = {
        'fee': 'fee',
        'hash': 'hash',
        'hex': 'hex',
        'locktime': 'locktime',
        'size': 'size',
        'txid': 'txid',
        'version': 'version',
        'vin': 'vin',
        'vout': 'vout',
        'vsize': 'vsize',
        'weight': 'weight'
    }

    def __init__(self, fee=None, hash=None, hex=None, locktime=None, size=None, txid=None, version=None, vin=None, vout=None, vsize=None, weight=None):  # noqa: E501
        """GithubComSatstreamSsUtilsBitcoinCliBtcTx3 - a model defined in Swagger"""  # noqa: E501
        self._fee = None
        self._hash = None
        self._hex = None
        self._locktime = None
        self._size = None
        self._txid = None
        self._version = None
        self._vin = None
        self._vout = None
        self._vsize = None
        self._weight = None
        self.discriminator = None
        if fee is not None:
            self.fee = fee
        if hash is not None:
            self.hash = hash
        if hex is not None:
            self.hex = hex
        if locktime is not None:
            self.locktime = locktime
        if size is not None:
            self.size = size
        if txid is not None:
            self.txid = txid
        if version is not None:
            self.version = version
        if vin is not None:
            self.vin = vin
        if vout is not None:
            self.vout = vout
        if vsize is not None:
            self.vsize = vsize
        if weight is not None:
            self.weight = weight

    @property
    def fee(self):
        """Gets the fee of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501


        :return: The fee of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.


        :param fee: The fee of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :type: float
        """

        self._fee = fee

    @property
    def hash(self):
        """Gets the hash of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501


        :return: The hash of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.


        :param hash: The hash of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def hex(self):
        """Gets the hex of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501


        :return: The hex of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :rtype: str
        """
        return self._hex

    @hex.setter
    def hex(self, hex):
        """Sets the hex of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.


        :param hex: The hex of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :type: str
        """

        self._hex = hex

    @property
    def locktime(self):
        """Gets the locktime of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501


        :return: The locktime of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :rtype: int
        """
        return self._locktime

    @locktime.setter
    def locktime(self, locktime):
        """Sets the locktime of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.


        :param locktime: The locktime of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :type: int
        """

        self._locktime = locktime

    @property
    def size(self):
        """Gets the size of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501


        :return: The size of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.


        :param size: The size of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def txid(self):
        """Gets the txid of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501


        :return: The txid of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :rtype: str
        """
        return self._txid

    @txid.setter
    def txid(self, txid):
        """Sets the txid of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.


        :param txid: The txid of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :type: str
        """

        self._txid = txid

    @property
    def version(self):
        """Gets the version of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501


        :return: The version of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.


        :param version: The version of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def vin(self):
        """Gets the vin of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501


        :return: The vin of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :rtype: list[GithubComSatstreamSsUtilsBitcoinCliBlockVin3]
        """
        return self._vin

    @vin.setter
    def vin(self, vin):
        """Sets the vin of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.


        :param vin: The vin of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :type: list[GithubComSatstreamSsUtilsBitcoinCliBlockVin3]
        """

        self._vin = vin

    @property
    def vout(self):
        """Gets the vout of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501


        :return: The vout of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :rtype: list[GithubComSatstreamSsUtilsBitcoinCliVout]
        """
        return self._vout

    @vout.setter
    def vout(self, vout):
        """Sets the vout of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.


        :param vout: The vout of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :type: list[GithubComSatstreamSsUtilsBitcoinCliVout]
        """

        self._vout = vout

    @property
    def vsize(self):
        """Gets the vsize of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501


        :return: The vsize of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :rtype: int
        """
        return self._vsize

    @vsize.setter
    def vsize(self, vsize):
        """Sets the vsize of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.


        :param vsize: The vsize of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :type: int
        """

        self._vsize = vsize

    @property
    def weight(self):
        """Gets the weight of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501


        :return: The weight of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.


        :param weight: The weight of this GithubComSatstreamSsUtilsBitcoinCliBtcTx3.  # noqa: E501
        :type: int
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GithubComSatstreamSsUtilsBitcoinCliBtcTx3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComSatstreamSsUtilsBitcoinCliBtcTx3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
