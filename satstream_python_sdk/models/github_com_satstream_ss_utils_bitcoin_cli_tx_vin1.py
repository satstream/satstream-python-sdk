# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GithubComSatstreamSsUtilsBitcoinCliTxVin1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coinbase': 'str',
        'script_sig': 'GithubComSatstreamSsUtilsBitcoinCliScriptSig',
        'sequence': 'int',
        'txid': 'str',
        'txinwitness': 'list[str]',
        'vout': 'int'
    }

    attribute_map = {
        'coinbase': 'coinbase',
        'script_sig': 'scriptSig',
        'sequence': 'sequence',
        'txid': 'txid',
        'txinwitness': 'txinwitness',
        'vout': 'vout'
    }

    def __init__(self, coinbase=None, script_sig=None, sequence=None, txid=None, txinwitness=None, vout=None):  # noqa: E501
        """GithubComSatstreamSsUtilsBitcoinCliTxVin1 - a model defined in Swagger"""  # noqa: E501
        self._coinbase = None
        self._script_sig = None
        self._sequence = None
        self._txid = None
        self._txinwitness = None
        self._vout = None
        self.discriminator = None
        if coinbase is not None:
            self.coinbase = coinbase
        if script_sig is not None:
            self.script_sig = script_sig
        if sequence is not None:
            self.sequence = sequence
        if txid is not None:
            self.txid = txid
        if txinwitness is not None:
            self.txinwitness = txinwitness
        if vout is not None:
            self.vout = vout

    @property
    def coinbase(self):
        """Gets the coinbase of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501


        :return: The coinbase of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501
        :rtype: str
        """
        return self._coinbase

    @coinbase.setter
    def coinbase(self, coinbase):
        """Sets the coinbase of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.


        :param coinbase: The coinbase of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501
        :type: str
        """

        self._coinbase = coinbase

    @property
    def script_sig(self):
        """Gets the script_sig of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501


        :return: The script_sig of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501
        :rtype: GithubComSatstreamSsUtilsBitcoinCliScriptSig
        """
        return self._script_sig

    @script_sig.setter
    def script_sig(self, script_sig):
        """Sets the script_sig of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.


        :param script_sig: The script_sig of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501
        :type: GithubComSatstreamSsUtilsBitcoinCliScriptSig
        """

        self._script_sig = script_sig

    @property
    def sequence(self):
        """Gets the sequence of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501


        :return: The sequence of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.


        :param sequence: The sequence of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501
        :type: int
        """

        self._sequence = sequence

    @property
    def txid(self):
        """Gets the txid of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501


        :return: The txid of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501
        :rtype: str
        """
        return self._txid

    @txid.setter
    def txid(self, txid):
        """Sets the txid of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.


        :param txid: The txid of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501
        :type: str
        """

        self._txid = txid

    @property
    def txinwitness(self):
        """Gets the txinwitness of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501


        :return: The txinwitness of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501
        :rtype: list[str]
        """
        return self._txinwitness

    @txinwitness.setter
    def txinwitness(self, txinwitness):
        """Sets the txinwitness of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.


        :param txinwitness: The txinwitness of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501
        :type: list[str]
        """

        self._txinwitness = txinwitness

    @property
    def vout(self):
        """Gets the vout of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501


        :return: The vout of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501
        :rtype: int
        """
        return self._vout

    @vout.setter
    def vout(self, vout):
        """Sets the vout of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.


        :param vout: The vout of this GithubComSatstreamSsUtilsBitcoinCliTxVin1.  # noqa: E501
        :type: int
        """

        self._vout = vout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GithubComSatstreamSsUtilsBitcoinCliTxVin1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComSatstreamSsUtilsBitcoinCliTxVin1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
