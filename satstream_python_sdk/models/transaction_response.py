# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransactionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chain': 'str',
        'etching': 'str',
        'inscription_count': 'int',
        'transaction': 'TransactionDetails',
        'txid': 'str'
    }

    attribute_map = {
        'chain': 'chain',
        'etching': 'etching',
        'inscription_count': 'inscription_count',
        'transaction': 'transaction',
        'txid': 'txid'
    }

    def __init__(self, chain=None, etching=None, inscription_count=None, transaction=None, txid=None):  # noqa: E501
        """TransactionResponse - a model defined in Swagger"""  # noqa: E501
        self._chain = None
        self._etching = None
        self._inscription_count = None
        self._transaction = None
        self._txid = None
        self.discriminator = None
        if chain is not None:
            self.chain = chain
        if etching is not None:
            self.etching = etching
        if inscription_count is not None:
            self.inscription_count = inscription_count
        if transaction is not None:
            self.transaction = transaction
        if txid is not None:
            self.txid = txid

    @property
    def chain(self):
        """Gets the chain of this TransactionResponse.  # noqa: E501


        :return: The chain of this TransactionResponse.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this TransactionResponse.


        :param chain: The chain of this TransactionResponse.  # noqa: E501
        :type: str
        """

        self._chain = chain

    @property
    def etching(self):
        """Gets the etching of this TransactionResponse.  # noqa: E501


        :return: The etching of this TransactionResponse.  # noqa: E501
        :rtype: str
        """
        return self._etching

    @etching.setter
    def etching(self, etching):
        """Sets the etching of this TransactionResponse.


        :param etching: The etching of this TransactionResponse.  # noqa: E501
        :type: str
        """

        self._etching = etching

    @property
    def inscription_count(self):
        """Gets the inscription_count of this TransactionResponse.  # noqa: E501


        :return: The inscription_count of this TransactionResponse.  # noqa: E501
        :rtype: int
        """
        return self._inscription_count

    @inscription_count.setter
    def inscription_count(self, inscription_count):
        """Sets the inscription_count of this TransactionResponse.


        :param inscription_count: The inscription_count of this TransactionResponse.  # noqa: E501
        :type: int
        """

        self._inscription_count = inscription_count

    @property
    def transaction(self):
        """Gets the transaction of this TransactionResponse.  # noqa: E501


        :return: The transaction of this TransactionResponse.  # noqa: E501
        :rtype: TransactionDetails
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this TransactionResponse.


        :param transaction: The transaction of this TransactionResponse.  # noqa: E501
        :type: TransactionDetails
        """

        self._transaction = transaction

    @property
    def txid(self):
        """Gets the txid of this TransactionResponse.  # noqa: E501


        :return: The txid of this TransactionResponse.  # noqa: E501
        :rtype: str
        """
        return self._txid

    @txid.setter
    def txid(self, txid):
        """Sets the txid of this TransactionResponse.


        :param txid: The txid of this TransactionResponse.  # noqa: E501
        :type: str
        """

        self._txid = txid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
