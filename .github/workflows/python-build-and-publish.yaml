# This file is here to save, but it is added to Github manually.
name: Build and Publish on ss-api Update

# Trigger the workflow on a schedule and manually
on:
  workflow_dispatch:       # Allows manual triggering
  push:
    branches:
      - main

jobs:
  check-and-publish:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the satstream-python-sdk repository
      - name: Checkout satstream-python-sdk
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Specify your Python version

      # Step 3: Install Git (usually pre-installed on runners)
      - name: Install Git
        run: sudo apt-get install git

      # Step 4: Clone the private ss-api repository
      - name: Clone ss-api Repository
        env:
          SS_API_TOKEN: ${{ secrets.SS_API_TOKEN }}
        run: |
          git clone https://$SS_API_TOKEN@github.com/satstream/ss-api.git ss-api
          cd ss-api
          echo "Latest ss-api commit: $(git rev-parse HEAD)" > ../ss_api_commit.txt

      # Step 5: Retrieve the last processed commit from cache
      - name: Get Last ss-api Commit
        id: get_last_commit
        uses: actions/cache@v3
        with:
          path: last_ss_api_commit.txt
          key: last-commit-ss-api
          restore-keys: |
            last-commit-ss-api

      # Step 6: Compare commits to determine if there's an update
      - name: Compare Commits
        id: compare_commits
        run: |
          if [ -f last_ss_api_commit.txt ]; then
            LAST_COMMIT=$(cat last_ss_api_commit.txt)
          else
            LAST_COMMIT=""
          fi
          CURRENT_COMMIT=$(cat ss_api_commit.txt)
          echo "Last Commit: $LAST_COMMIT"
          echo "Current Commit: $CURRENT_COMMIT"
          if [ "$CURRENT_COMMIT" != "$LAST_COMMIT" ]; then
            echo "ss-api has new commits."
            echo "::set-output name=updated::true"
          else
            echo "No new commits in ss-api."
            echo "::set-output name=updated::false"
          fi

      # Step 7: Exit if there's no update
      - name: Exit if No Update
        if: steps.compare_commits.outputs.updated != 'true'
        run: echo "No updates detected. Exiting."
      
      # Step 8: Update the cached last commit
      - name: Update Last Commit Cache
        if: steps.compare_commits.outputs.updated == 'true'
        uses: actions/cache@v3
        with:
          path: last_ss_api_commit.txt
          key: last-commit-ss-api
          restore-keys: |
            last-commit-ss-api
        # Note: This step might require using a different caching strategy to overwrite the cache.

      # Step 9: Build the satstream-python-sdk package
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Build Package
        run: python setup.py sdist bdist_wheel

      # Step 10: Publish to PyPI
      - name: Publish to PyPI
        env:
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m pip install --upgrade twine
          twine upload dist/* -u $PYPI_USERNAME -p $PYPI_PASSWORD
