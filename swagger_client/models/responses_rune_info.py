# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponsesRuneInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_height': 'int',
        'divisibility': 'int',
        'minted': 'str',
        'premine': 'BigInt',
        'rune': 'str',
        'rune_id': 'str',
        'spaced_rune': 'str',
        'spacers': 'int',
        'symbol': 'str',
        'terms': 'GithubComSatstreamSsUtilsOrdinalsTerms',
        'turbo': 'bool',
        'tx_height': 'int',
        'txid': 'str'
    }

    attribute_map = {
        'block_height': 'block_height',
        'divisibility': 'divisibility',
        'minted': 'minted',
        'premine': 'premine',
        'rune': 'rune',
        'rune_id': 'rune_id',
        'spaced_rune': 'spaced_rune',
        'spacers': 'spacers',
        'symbol': 'symbol',
        'terms': 'terms',
        'turbo': 'turbo',
        'tx_height': 'tx_height',
        'txid': 'txid'
    }

    def __init__(self, block_height=None, divisibility=None, minted=None, premine=None, rune=None, rune_id=None, spaced_rune=None, spacers=None, symbol=None, terms=None, turbo=None, tx_height=None, txid=None):  # noqa: E501
        """ResponsesRuneInfo - a model defined in Swagger"""  # noqa: E501
        self._block_height = None
        self._divisibility = None
        self._minted = None
        self._premine = None
        self._rune = None
        self._rune_id = None
        self._spaced_rune = None
        self._spacers = None
        self._symbol = None
        self._terms = None
        self._turbo = None
        self._tx_height = None
        self._txid = None
        self.discriminator = None
        if block_height is not None:
            self.block_height = block_height
        if divisibility is not None:
            self.divisibility = divisibility
        if minted is not None:
            self.minted = minted
        if premine is not None:
            self.premine = premine
        if rune is not None:
            self.rune = rune
        if rune_id is not None:
            self.rune_id = rune_id
        if spaced_rune is not None:
            self.spaced_rune = spaced_rune
        if spacers is not None:
            self.spacers = spacers
        if symbol is not None:
            self.symbol = symbol
        if terms is not None:
            self.terms = terms
        if turbo is not None:
            self.turbo = turbo
        if tx_height is not None:
            self.tx_height = tx_height
        if txid is not None:
            self.txid = txid

    @property
    def block_height(self):
        """Gets the block_height of this ResponsesRuneInfo.  # noqa: E501


        :return: The block_height of this ResponsesRuneInfo.  # noqa: E501
        :rtype: int
        """
        return self._block_height

    @block_height.setter
    def block_height(self, block_height):
        """Sets the block_height of this ResponsesRuneInfo.


        :param block_height: The block_height of this ResponsesRuneInfo.  # noqa: E501
        :type: int
        """

        self._block_height = block_height

    @property
    def divisibility(self):
        """Gets the divisibility of this ResponsesRuneInfo.  # noqa: E501


        :return: The divisibility of this ResponsesRuneInfo.  # noqa: E501
        :rtype: int
        """
        return self._divisibility

    @divisibility.setter
    def divisibility(self, divisibility):
        """Sets the divisibility of this ResponsesRuneInfo.


        :param divisibility: The divisibility of this ResponsesRuneInfo.  # noqa: E501
        :type: int
        """

        self._divisibility = divisibility

    @property
    def minted(self):
        """Gets the minted of this ResponsesRuneInfo.  # noqa: E501


        :return: The minted of this ResponsesRuneInfo.  # noqa: E501
        :rtype: str
        """
        return self._minted

    @minted.setter
    def minted(self, minted):
        """Sets the minted of this ResponsesRuneInfo.


        :param minted: The minted of this ResponsesRuneInfo.  # noqa: E501
        :type: str
        """

        self._minted = minted

    @property
    def premine(self):
        """Gets the premine of this ResponsesRuneInfo.  # noqa: E501


        :return: The premine of this ResponsesRuneInfo.  # noqa: E501
        :rtype: BigInt
        """
        return self._premine

    @premine.setter
    def premine(self, premine):
        """Sets the premine of this ResponsesRuneInfo.


        :param premine: The premine of this ResponsesRuneInfo.  # noqa: E501
        :type: BigInt
        """

        self._premine = premine

    @property
    def rune(self):
        """Gets the rune of this ResponsesRuneInfo.  # noqa: E501


        :return: The rune of this ResponsesRuneInfo.  # noqa: E501
        :rtype: str
        """
        return self._rune

    @rune.setter
    def rune(self, rune):
        """Sets the rune of this ResponsesRuneInfo.


        :param rune: The rune of this ResponsesRuneInfo.  # noqa: E501
        :type: str
        """

        self._rune = rune

    @property
    def rune_id(self):
        """Gets the rune_id of this ResponsesRuneInfo.  # noqa: E501


        :return: The rune_id of this ResponsesRuneInfo.  # noqa: E501
        :rtype: str
        """
        return self._rune_id

    @rune_id.setter
    def rune_id(self, rune_id):
        """Sets the rune_id of this ResponsesRuneInfo.


        :param rune_id: The rune_id of this ResponsesRuneInfo.  # noqa: E501
        :type: str
        """

        self._rune_id = rune_id

    @property
    def spaced_rune(self):
        """Gets the spaced_rune of this ResponsesRuneInfo.  # noqa: E501


        :return: The spaced_rune of this ResponsesRuneInfo.  # noqa: E501
        :rtype: str
        """
        return self._spaced_rune

    @spaced_rune.setter
    def spaced_rune(self, spaced_rune):
        """Sets the spaced_rune of this ResponsesRuneInfo.


        :param spaced_rune: The spaced_rune of this ResponsesRuneInfo.  # noqa: E501
        :type: str
        """

        self._spaced_rune = spaced_rune

    @property
    def spacers(self):
        """Gets the spacers of this ResponsesRuneInfo.  # noqa: E501


        :return: The spacers of this ResponsesRuneInfo.  # noqa: E501
        :rtype: int
        """
        return self._spacers

    @spacers.setter
    def spacers(self, spacers):
        """Sets the spacers of this ResponsesRuneInfo.


        :param spacers: The spacers of this ResponsesRuneInfo.  # noqa: E501
        :type: int
        """

        self._spacers = spacers

    @property
    def symbol(self):
        """Gets the symbol of this ResponsesRuneInfo.  # noqa: E501


        :return: The symbol of this ResponsesRuneInfo.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this ResponsesRuneInfo.


        :param symbol: The symbol of this ResponsesRuneInfo.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def terms(self):
        """Gets the terms of this ResponsesRuneInfo.  # noqa: E501


        :return: The terms of this ResponsesRuneInfo.  # noqa: E501
        :rtype: GithubComSatstreamSsUtilsOrdinalsTerms
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this ResponsesRuneInfo.


        :param terms: The terms of this ResponsesRuneInfo.  # noqa: E501
        :type: GithubComSatstreamSsUtilsOrdinalsTerms
        """

        self._terms = terms

    @property
    def turbo(self):
        """Gets the turbo of this ResponsesRuneInfo.  # noqa: E501


        :return: The turbo of this ResponsesRuneInfo.  # noqa: E501
        :rtype: bool
        """
        return self._turbo

    @turbo.setter
    def turbo(self, turbo):
        """Sets the turbo of this ResponsesRuneInfo.


        :param turbo: The turbo of this ResponsesRuneInfo.  # noqa: E501
        :type: bool
        """

        self._turbo = turbo

    @property
    def tx_height(self):
        """Gets the tx_height of this ResponsesRuneInfo.  # noqa: E501


        :return: The tx_height of this ResponsesRuneInfo.  # noqa: E501
        :rtype: int
        """
        return self._tx_height

    @tx_height.setter
    def tx_height(self, tx_height):
        """Sets the tx_height of this ResponsesRuneInfo.


        :param tx_height: The tx_height of this ResponsesRuneInfo.  # noqa: E501
        :type: int
        """

        self._tx_height = tx_height

    @property
    def txid(self):
        """Gets the txid of this ResponsesRuneInfo.  # noqa: E501


        :return: The txid of this ResponsesRuneInfo.  # noqa: E501
        :rtype: str
        """
        return self._txid

    @txid.setter
    def txid(self, txid):
        """Sets the txid of this ResponsesRuneInfo.


        :param txid: The txid of this ResponsesRuneInfo.  # noqa: E501
        :type: str
        """

        self._txid = txid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponsesRuneInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponsesRuneInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
