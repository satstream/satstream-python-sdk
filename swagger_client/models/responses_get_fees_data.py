# coding: utf-8

"""
    Satstream API

    Satstream API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@satstream.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponsesGetFeesData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'confirmation_blocks': 'int',
        'fee_rate_in_btc': 'float'
    }

    attribute_map = {
        'confirmation_blocks': 'confirmation_blocks',
        'fee_rate_in_btc': 'fee_rate_in_btc'
    }

    def __init__(self, confirmation_blocks=None, fee_rate_in_btc=None):  # noqa: E501
        """ResponsesGetFeesData - a model defined in Swagger"""  # noqa: E501
        self._confirmation_blocks = None
        self._fee_rate_in_btc = None
        self.discriminator = None
        if confirmation_blocks is not None:
            self.confirmation_blocks = confirmation_blocks
        if fee_rate_in_btc is not None:
            self.fee_rate_in_btc = fee_rate_in_btc

    @property
    def confirmation_blocks(self):
        """Gets the confirmation_blocks of this ResponsesGetFeesData.  # noqa: E501


        :return: The confirmation_blocks of this ResponsesGetFeesData.  # noqa: E501
        :rtype: int
        """
        return self._confirmation_blocks

    @confirmation_blocks.setter
    def confirmation_blocks(self, confirmation_blocks):
        """Sets the confirmation_blocks of this ResponsesGetFeesData.


        :param confirmation_blocks: The confirmation_blocks of this ResponsesGetFeesData.  # noqa: E501
        :type: int
        """

        self._confirmation_blocks = confirmation_blocks

    @property
    def fee_rate_in_btc(self):
        """Gets the fee_rate_in_btc of this ResponsesGetFeesData.  # noqa: E501


        :return: The fee_rate_in_btc of this ResponsesGetFeesData.  # noqa: E501
        :rtype: float
        """
        return self._fee_rate_in_btc

    @fee_rate_in_btc.setter
    def fee_rate_in_btc(self, fee_rate_in_btc):
        """Sets the fee_rate_in_btc of this ResponsesGetFeesData.


        :param fee_rate_in_btc: The fee_rate_in_btc of this ResponsesGetFeesData.  # noqa: E501
        :type: float
        """

        self._fee_rate_in_btc = fee_rate_in_btc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponsesGetFeesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponsesGetFeesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
